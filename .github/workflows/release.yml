name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-binary:
    strategy:
      fail-fast: false
      matrix:
        # platform: [macos-latest, ubuntu-latest, windows-latest]
        platform: [windows-latest]
        node-version: [16.x]

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Fetch source code
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        override: true
        toolchain: 1.58
    
    - name: Install dependencies
      run: npm install
    - name: Build Holochain 
      env:
        SQLCIPHER_STATIC: 1
      run: |
        cargo install lair_keystore --version 0.0.9
        cargo install --locked holochain --git https://github.com/holochain/holochain.git --tag holochain-0.0.127
        cargo install holochain_cli --version 0.0.28

        mkdir temp/binary

        $LkPath = Get-Command lair-keystore | Select-Object -ExpandProperty Definition
        Copy-Item $LkPath -Destination temp/binary/lair-keystore.exe

        $HcPath = Get-Command holochain | Select-Object -ExpandProperty Definition
        Copy-Item $HcPath -Destination temp/binary/holochain.exe

        $HciPath = Get-Command hc | Select-Object -ExpandProperty Definition
        Copy-Item $HciPath -Destination temp/binary/hc.exe
    - name: List binaries
      run: ls temp/binary
    
    - name: Build the binary (macos-latest)
      if: matrix.platform == 'macos-latest'
      run: npm run build && npm run package-macos
    - name: Upload the binary (macos-latest)
      if: matrix.platform == 'macos-latest'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/ad4m-macos-x64"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
    
    - name: Build the binary (linux-latest)
      if: matrix.platform == 'ubuntu-latest'
      run: npm run build && npm run package-linux
    - name: Upload the binary (linux-latest)
      if: matrix.platform == 'ubuntu-latest'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/ad4m-linux-x64"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
    
    - name: Build the binary (windows-latest)
      if: matrix.platform == 'windows-latest'
      run: npm run build && npm run package-windows
    # - name: Upload the binary (windows-latest)
    #   if: matrix.platform == 'windows-latest'
    #   uses: ncipollo/release-action@v1
    #   with:
    #     artifacts: "dist/ad4m-windows-x64.exe"
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     allowUpdates: false
    #     draft: true
    - name: Retrieve tag version
      id: ref
      run: |
        pkgver=$(node ./scripts/get-pkg-version.js)
        echo ::set-output name=version::$pkgver
    - name: Create a new release draft
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        tag_name: v${{steps.ref.outputs.version}}
        release_name: Release v${{steps.ref.outputs.version}} 
        body: If you can read this, we have forgotten to fill in the changelog. Sorry!
        draft: true
    - name: Upload the Windows binary
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ad4m-windows-x64.exe
        asset_name: ad4m-windows-x64.exe
        asset_content_type: application/octet-stream
